package org.icgc.dcc.release.job.index.core;

import java.io.File;

import lombok.SneakyThrows;
import lombok.val;
import lombok.extern.slf4j.Slf4j;

import org.apache.commons.io.FileUtils;
import org.icgc.dcc.release.core.job.FileType;
import org.icgc.dcc.release.job.index.config.IndexProperties;
import org.icgc.dcc.release.job.index.core.IndexJob;
import org.icgc.dcc.release.test.job.AbstractJobTest;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

@Slf4j
public class IndexJobTest extends AbstractJobTest {

  /**
   * Class under test.
   */
  IndexJob job;

  @Override
  @Before
  public void setUp() {
    cleanOutputFiles();
    super.setUp();
    val properties = new IndexProperties()
        .setEsUri("es://localhost:9300")
        .setOutputDir(new File(workingDir, "output").getAbsolutePath());

    this.job = new IndexJob(properties);

  }

  @After
  public void tearDown() {
    cleanOutputFiles();
  }

  @Test
  public void testExecute() {
    given(inputFile()
        .fileType(FileType.RELEASE)
        .path(resolvePath("working/release"))
        .fileName("working/release"));
    given(inputFile()
        .fileType(FileType.PROJECT)
        .path(resolvePath("working/project"))
        .fileName("working/project"));
    given(inputFile()
        .fileType(FileType.GENE)
        .path(resolvePath("working/gene"))
        .fileName("working/gene"));

    job.execute(createJobContext(job.getType()));
  }

  @SneakyThrows
  private static void cleanOutputFiles() {
    // FIXME: Implement proper cleanup of files generated by the IndexJob
    val indexerDir = new File("indexer");
    if (indexerDir.exists()) {
      log.debug("Deleting directory: {}", indexerDir.getAbsolutePath());
      FileUtils.deleteDirectory(indexerDir);
    }
  }

}
